17/3

+ Vì sao trong Java không cho đa kế thừa:- VÌ java được thiết kế với nhiều cải tiến trong đó sự đơn giản là một trong những điều quan trọng. Việc cho                                                                 phép đa kế thừa sẽ mang đến nhiều hệ lụy, khiến cho code trở nên mơ hồ.

+ Lớp abstract là gì:- Abstract Class có nghĩa là một lớp trừu tượng. Abstract Class là một loại lớp trong OOP – Lập trình hướng đối tượng. Abstract Class khai báo một                        hay nhiều method trừu tượng. Chúng có thể có cả method trừu tượng và method cụ thể. Một lớp bình thường không thể có method trừu tượng. Điều này                        có nghĩa là một abstract class phải chứa ít nhất một method trừu tượng. 
                     - Một method trừu tượng là một method được khai báo không có triển khai (không có dấu ngoặc nhọn và kết thúc là một dấu chấm phẩy).
                     - Một Abstract Class không thể tạo đối tượng nhưng có thể bao gồm lớp con. Khi một lớp trừu tượng bao gồm các lớp con, lớp con thường cung cấp                            triển khai cho tất cả các method trừu tượng của lớp cha. Ngoài ra, lớp trừu tượng có thể có trường động và trường tĩnh. Tuy nhiên, nếu lớp con                          không triển khai cho lớp cha, nó cũng sẽ là một lớp trừu tượng.

20/3

+ Phương thức abstract là gì:- Một phương thức được khai báo là abstract và không có trình triển khai thì đó là phương thức trừu tượng.
                             - Nếu bạn muốn một lớp chứa một phương thức cụ thể nhưng bạn muốn triển khai thực sự phương thức đó để được quyết định bởi các lớp con,                                  thì bạn có thể khai báo phương thức đó trong lớp cha ở dạng abstract.
                             - Từ khóa abstract được sử dụng để khai báo một phương thức dạng abstract. Một phương thức abstract không có thân phương thức.
                             - Phương thức abstract sẽ không có định nghĩa, được theo sau bởi dấu chấm phảy, không có dấu ngoặc nhọn theo sau:
                                    VD: abstract void printStatus();

+ Khi nào sử dụng lớp abstract: - Khi một nhóm đối tượng có cùng bản chất kế thừa từ một class thì sử dụng abstract class.


+ Các tính chất của lớp abstract: - Không thể tạo đối tượng của lớp abstract.
                                  - Lớp abstract có thể có các thuộc tính và phương thức bình thường.
                                  - Một lớp chứa phương thức abstract thì lớp đó phải là abstract.
                                  - Một lớp không phải là abstract kế thừa từ một lớp cha abstract thì phải implement tất cả các phương thức abstract của lớp cha.
                                  - Một lớp abstract kế thừa từ một lớp cha abstract thì có thể không implement các phương thức abstract của lớp cha.
                                  - Lớp abstract không thể là final.
                                  - Phương thức abstrac thì không thể là final.
                                  - Mức truy cập các hàm của abstract phải ở public hoặc protected để lớp kế thừa có thể định nghĩa lại và các thuộc tính của lớp                                           abstract không được khai báo abstract.
                                  
+ Interface là gì: - Là một cấu trúc tương tự như lớp, nhưng chỉ chứa các hằng số và abstract method.
                   - Interface quy định các hành vi chung cho các lớp triển khai nó.
                   - Sử dụng từ khóa interface để định nghĩa interface.
                   - Cú pháp: modifier interface InterfaceName {}
                      VD: public interface Flyable{}

+ Các tính chất của interface: - Định nghĩa interface tạo ra một kiểu dữ liệu mới.
                               - Không thể tạo đối tượng của interface
                               - Không thể chứa các phương thức không abstract.
                               - Khi một lớp triển khai interface thì cần triển khai tất cả các phương thức đc khai báo trong interface đó.
                               - Interface có thể đc thiết kế để khai báo các phương thức chung cho các lớp không liên quan vs nhau (khác vs abstract class đc kế thừa                                    bởi các lớp có liên quan với nhau).
                               - Interface bổ sung cho việc java không hỗ trợ đa kế thừa.

+ Khi nào dùng abstract khi nào dùng interface:
                    - Khi một nhóm đối tượng có cùng bản chất kế thừa từ một class thì sử dụng abstract class.
                    - Khi một nhóm đối tượng không có cùng bản chất nhưng chúng có hành động giống nhau thì sử dụng interface.
                    
                                --------------------------------------------------------------------
                                
                                
                                21/3
                                
  *  GENERIC
  
+ Generics trong Java: là một cách để xác định các kiểu cụ thể cho các lớp và phương thức trong ngữ cảnh khác nhau
    - Lớp generic là một lớp có thể tham chiếu bất kỳ đối tượng nào
    -Quy ước đặt tên tham số:
        1.  T - Type
        2.  E - Element
        3.  K - Key
        4.  N - Number
        5.  V - Value
        
          VD:  class MyGeneric<T>{
                        T obj;
                        void add(T obj){
                            this.obj = obj;
                        }
                        T get(){
                            return obj;
                        }
                    }
                    
     - Phương thức generic: có thể chấp nhận bất kỳ kiểu đối số nào   
     
           VD:    public static <E> void printArray(E[] elements) {
                        for (E element : elements) {
                            System.out.print(element + " ");
                        }
                        System.out.println();
                    }

                  
                    
      -Ký tự đại diện trong generic:-Trong Generic, dấu chấm hỏi (?) được gọi là một đại diện (wildcard), nó là kiểu không xác định.
                                    -Tùy vào ví trí của Wildcard mà nó sẽ có những ý nghĩa khác nhau:
                                    -Collection<?>: mô tả một tập hợp chấp nhận tất cả các loại đối số (chứa mọi kiểu đối tượng).
                                    -List<? extends Number>: mô tả một danh sách, nơi mà các phần tử là kiểu Number hoặc kiểu con của Number.
                                    -Comparator<? super String>: Mô tả một bộ so sánh (Comparator) mà thông số phải là String hoặc cha của String.      
            VD:  public class GenericTest5 {
                          // tao phuong thuc chi chap nhan tham so la lop con cua Shape
                          public static void drawShapes(List<? extends Shape> lists) {
                              for (Shape s : lists) {
                                  s.draw();// goi phuong thuc cua lop Shape boi lop con
                              }
                          }
                          
      - Các kiểu generic: 1.Tạo class generic vs tham số generic: VD: class Dictionary<K, V>
                          2.Thừa kế lớp generic: Một class mở rộng từ một class Generics, nó có thể quy định kiểu cho tham số Generics, giữ nguyên các tham số Generics                                                   hoặc thêm các tham số Generics.
                                +Các quy định kiểu cho tham số:chúng ta tái sử dụng class, VD: class Book extends Dictionary<String, String> 
                                +Quy định giữ nguyên tham sô: VD: class Book<K, V> extends Dictionary<K, V>{}
                                +Chúng ta có thể vừa quy định trước 1 kiểu cụ thể vừa giữ nguyên tham số generic
                                    VD:class Book<V> extends Dictionary<String, V> {
                                                public Book(String key, V value) {
                                                    super(key, value);
                                                }
                                +  Cách thêm các tham số Generics vào 1 Class generic khác
                                        VD:  class Book<K, V, I> extends Dictionary<K, V> {
                                                          private I info; // khởi tạo thêm tham số generic 

                                                          public Book(K key, V value) {
                                                              super(key, value);
                                                          }

                                                          public Book(K key, V value, I info) {
                                                              super(key, value);
                                                              this.info = info; // truyền Kiểu generic mới vào 
                                                          }
                          3. Generic interface: Chúng ta khởi tạo 1 interface sau đó để 1 class implements lên là chúng ta đã có thể sử dụng.
                                    VD: interface writer<T> {
                                              void update(T obj);
                                              void delete(T obj);
                                              void write(T obj);
                                          }
                                          class Book<T> implements writer<T>
                                          
   *EQUALS
   
   -Khi so sánh hai đối tượng với nhau Java gọi phương thức equal() của chúng trả về true nếu hai đói tượng bằng nhau trả về false nếu hai đối tượng khác nhau
   -Lưu ý: phép so sánh khi sử dụng phương thức equals và toán tử == là khác nhau.
          + Phương thức equals đc thiết kế để so sánh hai đối tượng vè mặt ngữ nghĩa (bằng cách so sánh các thành viên dữ liệu của lớp)
          + Toán tử == chỉ so sánh hai đối tượng về mặt kỹ thuật (bằng cách so sánh các tham chiếu của chúng nghĩa là địa chỉ bộ nhớ)
                  VD: public static void main(String[] args) {
                              String s1 = new String("This is a string");
                              String s2 = new String("This is a string");

                              System.out.println("s1 == s2: " + (s1 == s2));
                              System.out.println("s1.equals(s2): " + (s1.equals(s2)));
                          }
                          
*HASHCODE

- Các đối tượng như hashMAp hashTable sử dụng các đối tượng key để tìm kiếm các đối tượng value tương ứng. Và để tối ưu cho việc tìm kiếm, Java sử dụng các hash value 
  lấy từ phương thức hashCode() của các đối tượng key ddeeer gom nhóm các đối tượng này trong những cái goi là bucket. Mỗi bucket tương ứng vs một value tương ứng
- Khi tìm kiếm một đối tượng bất kỳ trong hashMap hay hashTable, đầu tiên Java sẽ lấy hash value của đối tượng key mà chúng ta muốn tìm kiếm. Sau đó nó sẽ trả về bucket để xem giá trị của hash value có trùng vs bucket nào hay không. Nếu thỏa mãn  một bucket nào đó thì Java sẽ trả về giá trj của đối tượng value mà chúng ta muốn tìm kiếm.
- Nhiều đối tượng có thể có cùng hash value, và do đó chúng có thể nằm chung một bucket. Trong trường hợp này, Java sẽ sử dụng tiếp phương thức equals() để tìm chính xác đối tượng value mà chúng ta muốn tìm kiếm.
- Ở đây chúng ta có một khái niệm gọi là contract giữa phương thức equals() và phương thức hashCode() đó là:
      Nếu hai đối tượng là bằng nhau thì chúng phải có cùng hashCode().
      Nếu hai đối tượng có cùng hashCode() thì chúng có thể bằng nhau hoặc là không.
