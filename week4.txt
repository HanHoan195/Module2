03/04
+ Kĩ thuật đổi tên biến và đổi tên phương thức: thay đổi tên biến hoặc phương thức để trở nên tốt hơn, dễ đọc có ý nghĩa tuân thủ coding convention
    -Cách đổi tên trong inteiJ: 1. Shift + f6 
                                2. Kích chuột phải ->refactor -> rename.  
 
+ Kĩ thuật tách biến: là kỹ thuật giúp đơn giản hóa các biểu thức và giúp dễ hiểu hơn
                      -Cách tách biến: kích chuột phải -> refactor ->Extract -> variable 
                      
+ Kĩ thuật tách hằng: -Trong nhiều trường hợp các giá trị " thần kỳ" (magic value) sẽ gây khó khăn cho việc đọc hiểu mã nguồn
                      -Tách hằng giúp mang lại ý nghĩa cho các giá trị thần kỳ và mã nguồn dễ hiểu hơn
                      -Cách tách hằng:  kích chuột phải -> refactor ->Extract -> constant
                      
+ kĩ thuật tách phương thức: -Một phương thức quá dài ,quá phức tạp hoặc xử lý quá nhiều tác vụ sẽ dẫn đến khó hiểu, khó kiểm soát
                             -Tách phương thức giúp cho các phương thức đọc dễ hiểu hơn, dễ kiểm soát hơn.
                             -Cách tách phương thức:  kích chuột phải -> refactor ->Extract -> method
                                
                                ----------------------------------------------------------------------
04/04

   * CÁC TÍNH CHẤT CỦA LẬP TRÌNH HƯỚNG ĐỐI TƯỢNG:
    
    +Tính đóng gói:
        - public class DehaCompany {
                 private long id;
                 private String fullName;
                 private Date birthDay;
                 private String phone;
                 private String email
    +Tính đa hình:
        -   Employee ep1 = new Experience
    
    +Tính trừu tượng:
        -public class Employee 
    
    +Tính kế thừa:
        - public class Experience extends Employee{
        - super(id, fullName, date, phone, email, type);
    
    +Override: 
    
            @Override
         public String toString() {
    
    +Overloangding: 
    
       - public Employee()
       - public Employee(long id, String fullName, Date birthDay, String phone, String email, EmployeeType employeeType) 
       
       
* SOLID:
 1. Single responsibility principle: Một class chỉ nên giữ 1 trách nhiệm duy nhất
        VD: public class ReportManager()
            {
               public void ReadDataFromDB();
               public void ProcessData();       // class này thực hiện ba nhiệm vụ nên tách ra ba class 
               public void PrintReport();
            }
2. Open/closed principle: -Có thể thoái mái mở rộng một class nhưng không đc sữa đổi bên trong class đó.
                          -Theo nguyên lý này mỗi khi ta muốn thêm chức năng cho chương trình chúng ta nên viết class mới mở rộng claass cũ 
                          bằng cách kế thừa hoặc sở hữu class cũ không nên sửa đổi class cũ.
                          
3. Liskov Substitution Principle: - Trong một chương trình các object của class con có thể thay thế class cha mà không lm thay đổi tính đúng đắn 
                                    của chương trình.
                                    
4. Interface Segregation Principle: Thay vì dùng một interface lớn ta nên tách nhiều ỉnterface nhỏ vs nhiều mục đích cụ thể.   

5. Dependency inversion principle: - Các module cấp cao không nên phụ thuộc vào module cấp thấp cả hai nên phụ thuộc vào abstraction.
                                   - Interface(abstract) không nên phụ thuộc vào chi tiết mà ngược lại .Các class giao tiếp vs nhau thông qua interface
                                   không phải thông qua implementation.

*TRY/CATCH

+ Ngoai lệ là gì:- Ngoại lệ trong Java là một đối tượng đại diện cho một lỗi hoặc một sự kiện bất ngờ xảy ra khi chương trình chạy và làm                   gián đoạn luồng thực thi bình thường của chương trình.
                 - Các loại Exception trong Java: 
                      + Checked Exception: Là loại exception xảy ra trong lúc compile time. Có thể kể đến như: IOException,                                                             SQLException,…
                      + Unchecked Exception: Các ngoại lệ không được kiểm tra tại thời điểm biên dịch, nhưng được kiểm tra trong thời                                                  gian chạy. Ví dụ như: ArithmeticException, NullPointerException, …
                      +  Error: Không thể khôi phục được. Như: OutOfMemoryError, VirtualMachineError,…
                      + Java cung cấp 5 từ khóa sử dụng để xử lý ngoại lệ đó là:
                           - try: Sử dụng để chứa đoạn lệnh có thể gây ra ngoại lệ, nó phải được theo sau bởi khối catch hoặc finally
                           - catch:	Sử dụng để xử lý ngoại lệ, các khối code để xử lý ngoại lệ sẽ được đặt trong đây
                           - finally: Sử dụng để thực thi đoạn mã cần thiết của chương trình. Khối này sẽ luôn được thực thi
                           - throw:	Sử dụng để ném ra ngoại lệ
                           - throws	Sử dụng để khai báo ngoại lệ

+ Xử lý ngoại lệ với try/catch:- Khi một ngoại lệ xảy ra, trình biên dịch tìm một khối catch phù hợp trong các khối catch đi kèm. Trình tự tìm là lần lượt từ khối thứ                                       nhất đến khối cuối cùng, khối catch đầu tiên bắt được ngoại lệ đó sẽ được thực thi.
    - Cú pháp: try{
                    //Khối lệnh có thể ném ra ngoại lệ
                }catch(<Exception_class_name> e){
                    //Code xử lý ngoại lệ
                }

+ Xử lý ngoại lệ với try/finally:- Phần try và phần catch trong khối try/catch là những phần bắt buộc phải có. Ngoài ra, ta còn có thể lắp một phần có tên finally vào                                          làm phần cuối cùng của khối try/catch.
                                 - Một khối finally là nơi ta đặt các đoạn mã phải được thực thi bất kể ngoại lệ có xảy ra hay không.
                                 
    - Cú pháp: try{
                    //Khối lệnh có thể ném ra ngoại lệ
                }finally{
                    //Khối lệnh trong đây luôn được thực thi
                }

+ Khối try/catch/finally:
    - Cú pháp: try{
                    //Khối lệnh có thể ném ra ngoại lệ
                }catch(<Exception_class_name_1> e){
                    //Code xử lý ngoại lệ 1
                }catch(<Exception_class_name_2> e){
                    //Code xử lý ngoại lệ 2
                }finally{
                    //Khối lệnh trong đây luôn được thực thi
                }
    

+ Các lệnh ném ngoại lệ: 
-Lệnh throw: Từ khóa throw được sử dụng để ném ra ngoại lệ cụ thể. Thông thường nó được sử dụng với exception do người dùng tự định nghĩa
    VD: System.out.println("Nhập tuổi của bạn:");
            age = sc.nextInt();
            //Tuổi không hợp lệ khi nhập số âm hoặc lớn hơn 200
            if(age < 0 || age > 200)
                throw new ArithmeticException("Tuổi không hợp lệ");

- Lệnh throws: Từ khóa throws sử dụng để khai báo ngoại lệ. Nó được sử dụng chủ yếu với checked exception
    VD: public void readFile() throws IOException{
                    // Khai báo ngoại lệ
                }
                    ------------------------------------------------------------------------------------
                06/04
 
*LÀM VIỆC VỚI FILE TRONG JAVA

- Một số phương thức lớp File:
       + exists() kiểm tra xem file có tồn tại hay không
       + getName() lấy tên file (input-file.txt)
       + getParent() lấy đường dẫn thư mục của file
       + getPath() đường dẫn đầy đủ
       + isDirectory() kiểm tra xem là thư mục hay không
       + isFile() kiểm tra xem là file hay không
       + length() cỡ file (byte)
       + createNewFile() tạo ra file mới
       + delete() xóa file
       + list() lấy tên file, thư mục chứa trong đường dẫn
       + mkdir() tạo thư mục    
       + renameTo(File dest) đổi tên file
     
- Tạo file và viết nội dung vào file: Lớp Formatter (java.util.Formatter) có thể tạo ra file mới và dùng để viết nội dung vào file bằng phương thức format
        VD: try {
                Formatter f = new Formatter("C:\\sololearn\\test.txt");
                f.format("%s %s %s", "1","John", "Smith \r\n");
                f.close();
            } catch (Exception e) {
                System.out.println("Error");
            }
-Đọc nội dung file: Lớp Scanner kế thừa từ lớp Iterator được sử dụng để đọc nội dung file. Nếu đọc theo từng dòng dùng phương thức hasNextLine và nextLine kết hợp.
        VD:   try {
    	  File x = new File("C:\\xuanthulab.net\\test.txt");
    	  Scanner sc = new Scanner(x);
    	  String content = "";
    	  while(sc.hasNextLine()) {
    		  content += sc.nextLine()+"\r\n";
    	  }
  	      System.out.println(content);

    	  sc.close();
    	} catch (FileNotFoundException e) {
    	  System.out.println("Error");
    	}
        
*FILEREADER
- Lớp FileReader trong java được sử dụng để đọc dữ liệu từ file. Nó trả về dữ liệu theo định dạng byte như lớp FileInputStream.
- Khai báo của lớp FileReader: public class FileReader extends InputStreamReader
- Các constructor của lớp FileReader:
        + FileReader(String file): Nó mở file với tên file ở dạng string đã cho ở chế độ đọc. Nếu tập tin không tồn tại, nó ném ra ngoại lệ FileNotFoundException.
        + FileReader(File file): Nó mở file với thể hiện của file đã cho ở chế độ đọc. Nếu tập tin không tồn tại, nó ném ra ngoại lệ FileNotFoundException.
        
- Các phương thức của lớp FileReader:
        + int read():	Nó được sử dụng để trả về một ký tự trong mẫu ASCII. Nó trả về -1 vào cuối tập tin.
        + void close():	Nó được sử dụng để đóng lớp FileReader.
       VD: public class FileReaderExample {
            public static void main(String args[]) throws Exception {
                FileReader fr = new FileReader("D:\\testout.txt");
                int i;
                while ((i = fr.read()) != -1) {
                    System.out.print((char) i);
                }
                fr.close();
            } 
            
 *FILEWRITER
 - Lớp FileWriter trong java được sử dụng để ghi các dữ liệu theo định dạng ký tự vào một file.
 - Khai báo của lớp FileWriter: public class FileWriter extends OutputStreamWriter
 - Các constructor của lớp FileWriter:
        + FileWriter(String file):	Tạo ra một file mới với giá trị truyền vào là tên file.
        + FileWriter(File file):	Tạo ra một file mới với giá trị truyền vào là đối tượng file.
- Các phương thức của lớp FileWriter:
        + void write(String text):	Nó được sử dụng để ghi string vào FileWriter.
        + void write(char c):	    Nó được sử dụng để ghi char vào FileWriter.
        + void write(char[] c):	    Nó được sử dụng để ghi mảng char vào FileWriter.
        + void flush():	            Nó được sử dụng để xả dữ liệu của FileWriter.
        + void close():     	    Nó được sử dụng để đóng FileWriter.
        
        VD: public class FileWriterExample {
                public static void main(String args[]) {
                    try {
                        FileWriter fw = new FileWriter("D:\\testout.txt");
                        fw.write("Welcome to java.");
                        fw.close();
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                    System.out.println("Success...");
                }
            }        
*BufferedWriter
- Lớp BufferedWriter trong java được sử dụng để cung cấp bộ đệm cho các các thể hiện của lớp Writer. Nó giúp hiệu suất nhanh. Nó thừa kế lớp Writer. Các ký tự đệm được sử dụng để cung cấp việc ghi dữ liệu hiệu quả với các mảng đơn, các ký tự và chuỗi.
- Khai báo của lớp BufferedWriter: public class BufferedWriter extends Writer
- Các constructor của lớp BufferedWriter: 
   + BufferedWriter(Writer wrt):Nó được sử dụng để tạo ra thể hiện của BufferedWriter có sử dụng kích thước mặc định                              cho một bộ đệm đầu ra.
   + BufferedWriter(Writer wrt, int size):	Nó được sử dụng để tạo ra thể hiện của BufferedWriter mà sử dụng kích                                    thước quy định cho một bộ đệm đầu ra.
- Các phương thức của lớp BufferedWriter:
    + void newLine():	Nó được sử dụng để thêm một dòng mới với dấu xuống dòng.
    + void write(int c):	Nó được sử dụng để ghi một ký tự duy nhất.
    + void write(char[] cbuf, int off, int len):	Nó được sử dụng để ghi một phần của một mảng các ký tự.
    + void write(String s, int off, int len):	Nó được sử dụng để ghi một phần của một chuỗi.
    + void flush():	Nó được sử dụng để xả BufferedWriter .
    + void close():	Nó được sử dụng để đóng BufferedWriter
    
    VD: public class BufferedWriterExample {
                public static void main(String[] args) throws Exception {
                    FileWriter writer = new FileWriter("D:\\testout.txt");
                    BufferedWriter buffer = new BufferedWriter(writer);
                    buffer.write("Welcome to java.");
                    buffer.close();
                    System.out.println("Success...");
                }
            }
*BufferedReader
- Lớp BufferedReader trong java được sử dụng để đọc văn bản từ một input stream dựa trên các ký tự (character stream). Nó có thể được sử dụng để đọc dữ liệu theo dòng (line by line) bằng phương thức readLine(). Nó giúp hiệu suất nhanh. Nó kế thừa lớp Reader.
- Khai báo của lớp BufferedReader: public class BufferedReader extends Reader
- Các constructor của lớp BufferedReader:
        +BufferedReader(Reader rd):	Nó được sử dụng để tạo ra thể hiện của BufferedReader mà sử dụng kích thước                                         mặc định cho một bộ đệm đầu vào.
       +BufferedReader(Reader rd, int size):Nó được sử dụng để tạo ra thể hiện của BufferedReader có sử dụng kích                                       thước quy định cho một bộ đệm đầu vào.
       
- Các phương thức của lớp BufferedReader:
        +int read(): Nó được sử dụng để đọc ký tự vật duy nhất.
        +int read(char[] cbuf, int off, int len):	Nó được sử dụng để đọc các ký tự thành một phần của một mảng.
        +boolean markSupported():	Nó được sử dụng để kiểm tra input stream có hỗ trợ các phương thức mark() và                                                    reset() không.
        +String readLine():	Nó được sử dụng để đọc một dòng văn bản.
        +boolean ready():	Nó được sử dụng để kiểm tra liệu các input stream đã sẵn sàng để được đọc.
        +long skip(long n):	Nó được sử dụng để bỏ qua n ký tự.
        +void reset():	Nó định vị lại stream tại vị trí mà phương thức đánh dấu lần cuối được gọi vào input stream                                              này.
        +void mark(int readAheadLimit):	Nó được sử dụng để đánh dấu vị trí hiện tại trong một stream.
        +void close():	Nó đóng các dòng đầu vào và giải phóng bất kỳ tài nguyên hệ thống nào liên kết đến stream.
            VD: public class BufferedReaderExample {
                    public static void main(String args[]) throws Exception {
                        FileReader fr = new FileReader("D:\\testout.txt");
                        BufferedReader br = new BufferedReader(fr);

                        int i;
                        while ((i = br.read()) != -1) {
                            System.out.print((char) i);
                        }
                        br.close();
                        fr.close();
                    }
                }
